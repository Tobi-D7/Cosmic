

name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on: 
  push:
  pull_request:
  release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windowsvc",
            fname: "*",
            path: "x64/Release",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019"
          }
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows",
            fname: "Cosmic.exe",
            path: ".",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu",
            fname: "Cosmic",
            path: "insdir",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install openssl
          choco install boost-msvc-14.1
          choco install ninja cmake
          ninja --version
          cmake --version
        # cmd "${{ matrix.config.environment_script }}"

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Configure
        shell: bash
        run: |
          #mkdir build
          #cd build
          cmake \
            -S . \
            -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
          cmake --build . --config ${{ matrix.config.build_type }}
          #make
         # mkdir -p ~/artifacts
          #dir 
          #cp -r ${{ matrix.config.path }}/${{ matrix.config.fname }} ~/artifacts
          mkdir -p ~/artifacts
          dir 
          cp -r ${{ matrix.config.path }}/${{ matrix.config.fname }} ~/artifacts
          
          #cd ../
          #zip ${{ matrix.config.artifact }}.zip build/
         # ls -R ~/artifacts/
    #  - name: Build
   #     shell: bash
   #     run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Install Strip
        shell: bash
        run: cmake --install . --strip

     # - name: Pack
      #  shell: bash
      #  working-directory: insdir
      #  run: |
         # mkdir -p ~/artifacts
         # dir 
       #   cp -r ${{ matrix.config.path }}/${{ matrix.config.fname }} ~/artifacts
          
          
      #    ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          path: ~/artifacts/*
          name: "${{ matrix.config.artifact }}"
   #   - name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1
      #  env:
     #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
     #   with:
        #  tag_name: ${{ github.ref }}
         # release_name: Release ${{ github.ref }}
        #  draft: false
        #  prerelease: false
      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/${{ matrix.config.fname }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
